/*
*****************************************************************************
                              Reflect.txt
Full Name  : Aryan Khurana
Student ID#: 145282216
Email      : akhurana22@myseneca.ca
Date of completion    : 14 January 2023
I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
*****************************************************************************
*/

Through this workshop, I learnt quite a few concepts. Firstly, I learnt that our program can receive command line arguments at runtime.
We do this by modifying our main function and making it look the following way:

int main (int argc, char *argv[])

Here, ‘argc’ is the number of command line arguments and ‘argv’ is an array of all the command line arguments.

Secondly, I learnt how we can use ‘extern’ keyword to use a global variable defined in one module in another module. To use this we define the variables in the header file first using the extern keyword.

extern double g_taxrate;
extern double g_dailydiscount;

Once we are done with this, we define the variables again in the cpp file.

double g_taxrate;
double g_dailydiscount;

I used the extern keyword here as I wanted the variable to be shared by another module as well. If I were to use internal linkage here instead by using the ‘static’ keyword, I wouldn’t have been able to use the variables in other modules as they would be independent to the original module itself.

Thirdly, I learn how to use static variables in my program. Static variables are basically variables which last for the full lifetime of the program or function. I used the static keyword to create a counter which tracks the number of data items printed by the display function.

static int counter = 1;

In order to upgrade the program to support dynamic memory, I had to make multiple changes in my code. Firstly, I had to allocate dynamic memory for strings in the constructor and the read function and then had to create a destructor for deleting dynamically allocated memory. After that, I had to implement the rule of three in my code in order to prevent memory leaks from copying.
The implementation for the rule of three is as follows:
FoodOrder::FoodOrder(const FoodOrder& foodOrder) {
        *this = foodOrder;
    }

FoodOrder& FoodOrder::operator=(const FoodOrder& foodOrder) {
    if (this != &foodOrder) {
        foodPrice = foodOrder.foodPrice;
        dailySpecial = foodOrder.dailySpecial;

        if (foodOrder.customerName != nullptr) {
            customerName = new char[strlen(foodOrder.customerName) + 1];
            strcpy(customerName, foodOrder.customerName);
        } else {
            customerName = nullptr;
        }

        if (foodOrder.foodDescription != nullptr) {
            foodDescription = new char[strlen(foodOrder.foodDescription) + 1];
            strcpy(customerName, foodOrder.foodDescription);
        } else {
            foodDescription = nullptr;
        }

    } else {
        customerName = nullptr;
        foodDescription = nullptr;
    }
    return *this;
}